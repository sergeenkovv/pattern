package behavior.State.One;

public class DeveloperDay {
    public static void main(String[] args) {
        Activity activity = new Sleeping();
        Developer developer = new Developer();

        developer.setActivity(activity);

        for (int i = 0; i < 9; i++) {

            developer.changeActivity();
            developer.justDoIt();

        }
    }
}
//Паттерн Состояние (State) позволяет объекту изменять свое поведение в зависимости от внутреннего состояния,
//т.е. шаблон обеспечивает изменение поведения объекта во время выполнения программы.

//в State переход между состояниями происходит внутри состояний или внутри контекста
//
//в Strategy мы переходим между состояниями ТОЛЬКО вызывая метод setStrategy в методе main

//Еще аналогия для тех кто играл в Скайрим или подобные игры )) должно стать понятно отличие Стратегии от Состояния
//Когда вы даете персонажу разное оружие - вы переключаете стратегию. Например: одноручный меч (определенная анимация, скорость атаки), берем в руки двуручную кувалду - анимация ударов меняется, скорость атаки тоже. При этом вы просто жмете ту же кнопку "атаковать", но делается это по разному, в зависимости от оружия (стратегии).
//В игре есть магическое оружие, которое обладает двумя состояниями:
//1. Есть заряды душ - оно наносит дополнительный урон молнией, огнем, льдом.., соответственно меняется анимация оружия и урон.
//2. Заряды закончились - оружие просто наносит обычный урон без дополнительных эффектов, до тех пор пока его не зарядить камнем душ снова (то есть изменится его состояние).

////Шаблон: Стратегия (Strategy)

//Шаблон: Состояние (State)
//
//Цель:
//Управление поведение объекта в зависимости от состояния.
//
//Для чего используется:
//Позволяет нам управлять поведение объекта в зависимости от внутреннего состояние объекта.
//
//Пример использования:
//поведение объекта зависит от его состояние и изменяется во время выполнения; когда встречается большое количество условных операторов, когда выбор ветви зависит от состояния объекта.