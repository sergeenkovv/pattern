package structural.Proxy;

public class ProjectRunner {
    public static void main(String[] args) {
        Project project = new ProxyProject("https://www.github.com/proselytear/realProject");
        //project.run();
    }
}

//Шаблон Proxy, он же Заместитель, он же Суррогат, предназначен для косвенного обращения к объекту.
// То есть обращение к методам реального объекта происходит через объект-заместитель (прокси).

// Используем Proxy: допустим клиент создает url. при создании объекта Proxy, он лишь сохраняет путь к файлу, но не создает экземпляр RealProject.
// он думает "ну зачем я его буду создавать. пользователь только выбрал url. но еще не прописал project.run();
// а как только прописать run, будет создан экземпляр RealProject, а в конструкторе RealProject будет вызван load(), а в классе Proxy в методе run у экземпляра RealProject будет вызван метод run.
// ТАК ПРОГРАММА НАЧНЕТ ГРУЗИТЬСЯ И ВЫПОЛНЯТЬСЯ

// Используем RealProject: допустим клиент создает url. при создании экземпляра RealProject сразу начнется загрузка (Load). а выполнение (run) начнется тогда когда прописать project.run();
// ТАК ПРОГРАММА НАЧНЕТ ГРУЗИТЬСЯ, А ПРИ ВЫЗОВЕ МЕТОДА run() НАЧНЕТ ВЫПОЛНЯТЬСЯ

// так если прописать Project project = new ProxyProject("https://www.github.com/proselytear/realProject"); загрузка не начнется. загрузка и выполнение начнется тогда когда клиент пропишет project.run();
// так если прописать Project project = new RealProject("https://www.github.com/proselytear/realProject"); загрузка начнется сразу. а выполнение начнется тогда когда клиент пропишет project.run();

//паттерн Proxy управляет доступом к RealProject и может сделать с ним что захочет

// тип через прокси мы можем вызвать RealPriject и еще что-то сделать с ним

//        шаблон: Прокси (Pгoxу)
//
//        Цель:
//
//        Для замещения другого объекта и контроля доступа к нему.
//
//        Для чего используется:
//        Для обеспечения контроля доступа к определенному объекту.
//
//        Пример использования:
//        — когда есть необходимость ссылаться на объект способом отличным от обычного указателя;
//        * удалённое замещение — локальный представитель вместо объекта в другом адресном пространстве.
//        * виртуальное замещение — создание "тяжёлых объектов" при необходимости.
//        * защищённое замещение — контроль доступа к указанному объекту
//        * "умная" ссылка — замена обычного указателя
//        (подсчёт числа ссылок, установка блокировки и т.д.)

//Последствия, которые проявляются в приложении после реализации шаблона Рrоху, в значительной степени определяются типом прокси-объекта.
//
//— Remote proxy. Достоинство удаленного прокси-объекта состоит в том, что он позволяет скрыть факт работы в сети от клиента. Клиент, работая с таким объектом, будет считать, что объект локальный. В действительности он имеет дело с локальным объектом, который для выполнения указанных ему операций отправляет вызовы по сети. Необходимо напомнить, что потенциальным недостатком прокси-объектов такого типа является возможное резкое увеличение времени отклика, что для клиента, не подозревающего о том, что он работает в
//сети, может оказаться довольно неожиданным.
//
//— Virtual proxy. Значительным преимуществом прокси-объектов данного типа является то, что они позволяют работать с собой как с реальными объектами. откладывая создание последних до того момента, когда это действительно понадобится. Более того, такие прокси-объекты могут даже в какой-то мере заниматься оптимизацией, например, определять, когда и как должен создаваться реальный объект.
//— Protection proxy. Достоинство таких прокси-объектов состоит в том, что они позволяют определять методы управления доступом.
//Файл не выбран
//Ещё